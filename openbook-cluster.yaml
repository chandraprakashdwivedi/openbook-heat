#
# This is a Talligent Heat template for deploying Openbook.
# Default user/pass for the Openbook UI is: openbook / Tall!gent
# supports Juno, Kilo

heat_template_version: 2013-05-23

description: >
  Talligent Heat template for deploying Openbook in a
  cluster scenario.

parameters:
  key_name:
    type: string
    description: Name of an existing key pair to use for the server
    constraints:
      - custom_constraint: nova.keypair
  image:
    type: string
    description: Image ID or image name to use for the server
    default: ubuntu-14.04
    constraints:
      - custom_constraint: glance.image
  flavor:
    type: string
    description: Flavor for the server to be created
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
  private_net:
    type: string
    description: Name of the private network for the compute server
    default: private
    constraints:
      - custom_constraint: neutron.network
  public_net:
    type: string
    description: Name of the public network for the compute server
    default: public
    constraints:
      - custom_constraint: neutron.network
  sharefile_user:
    type: string
    label: Sharefile Username
    description: Username for accessing Talligent Sharefile
    default: none
  sharefile_pass:
    type: string
    label: Sharefile Password
    description: Password for accessing Talligent Sharefile
    default: none
    hidden: true
  alt_download_url:
    type: string
    label: Alternate Openbook download URL
    description: Alternative download location of Openbook zip if Sharefile credentials are not provided
    default: none

resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: openbook-group
      description: Enable access to Openbook and SSH access
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 8080
          port_range_max: 8080
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 443
          port_range_max: 443
  
  public_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }
      security_groups:
      - {get_resource: security_group}
  
  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net }
      port_id: { get_resource: public_port }

  administrative_password:
    type: OS::Heat::RandomString
  
  galera_primary:
    type: Lib::MSG::Galera_Primary
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      private_net: { get_param: private_net }
      sharefile_user: { get_param: sharefile_user }
      sharefile_pass: { get_param: sharefile_pass }
      alt_download_url: { get_param: alt_download_url }
      admin_pass: { get_attr: [administrative_password, value] }

  galera_cluster:
    type: OS::Heat::ResourceGroup
    properties:
        count: 2
        resource_def:
            type: Lib::MSG::Galera
            properties:
              key_name: { get_param: key_name }
              image: { get_param: image }
              flavor: { get_param: flavor }
              private_net: { get_param: private_net }
              galera_primary: { get_attr: [ galera_primary, ip ] }
              admin_pass: { get_attr: [administrative_password, value] }
    
  openbook_cluster:
    type: OS::Heat::ResourceGroup
    properties:
      count: 3
      resource_def:
        type: Lib::MSG::Appserver
        properties:
          key_name: { get_param: key_name }
          image: { get_param: image }
          flavor: { get_param: flavor }
          private_net: { get_param: private_net }
          floating_ip: { get_attr: [ floating_ip, floating_ip_address ] }
          galera_ip: { get_attr: [ galera_primary, ip ] }
          galera: { get_attr: [galera_cluster, ip] }
          sharefile_user: { get_param: sharefile_user }
          sharefile_pass: { get_param: sharefile_pass }
          alt_download_url: { get_param: alt_download_url }
          admin_pass: { get_attr: [administrative_password, value] }
  
  haproxy:
    type: Lib::MSG::HAProxy
    properties:
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      port_id: { get_resource: public_port }
      servers: { get_attr: [openbook_cluster, ip] }
      floating_ip: { get_attr: [ floating_ip, floating_ip_address ] }

outputs:
  Openbook_admin:
    description: Openbook administrative user
    value: openbook
  Openbook_admin_password:
    description: Openbook administrative user password
    value: Tall!g3nt
  Openbook_URL:
    description: The URL to access the Openbook UI
    value:
      str_replace:
        template: https://host_ip/Openbook
        params:
          host_ip: { get_attr: [ floating_ip, floating_ip_address ] }
  admin_password:
    description: The database password for the galera cluster
    value: { get_attr: [administrative_password, value] }
