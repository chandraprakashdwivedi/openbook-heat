#
# This is a Talligent Heat template for deploying Openbook.
# Default user/pass for the Openbook UI is: openbook / Tall!gent
# supports Juno, Kilo

heat_template_version: 2013-05-23

description: >
  Talligent Heat template for deploying Openbook in a
  cluster scenario.

parameters:
  key_name:
    type: string
    description: Name of an existing key pair to use for the server
    constraints:
      - custom_constraint: nova.keypair
  image:
    type: string
    description: Image ID or image name to use for the server
    default: ubuntu-14.04
    constraints:
      - custom_constraint: glance.image
  flavor:
    type: string
    description: Flavor for the server to be created
    default: m1.small
    constraints:
      - custom_constraint: nova.flavor
  private_net:
    type: string
    description: Name of the private network for the compute server
    default: private
    constraints:
      - custom_constraint: neutron.network
  sharefile_user:
    type: string
    label: Sharefile Username
    description: Username for accessing Talligent Sharefile
    default: none
  sharefile_pass:
    type: string
    label: Sharefile Password
    description: Password for accessing Talligent Sharefile
    default: none
  alt_download_url:
    type: string
    label: Alternate Openbook download URL
    description: Alternative download location of Openbook zip if Sharefile credentials are not provided
    default: none

resources:
  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 3600

  wait_handle:
    type: OS::Heat::WaitConditionHandle
  
  administrative_password:
    type: OS::Heat::RandomString

  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: openbook-galera
      description: Enable access to Openbook and SSH access
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 3306
          port_range_max: 3306
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 4567
          port_range_max: 4567
        - remote_ip_prefix: 0.0.0.0/0
          protocol: udp
          port_range_min: 4567
          port_range_max: 4567
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 4568
          port_range_max: 4568
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 4444
          port_range_max: 4444
  
  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: private_net }
      security_groups:
        - { get_resource: security_group }
    
  galera1:
    type: OS::Nova::Server
    properties:
      name: galera1
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - network: { get_param: private_net }
      security_groups: [ { get_resource: security_group } ]
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            $admin_password: { get_attr: [administrative_password, value] }
            $sharefile_user: { get_param: sharefile_user }
            $sharefile_pass: { get_param: sharefile_pass }
            $alt_download_url: { get_param: alt_download_url }
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash -ex
            my_ip=$(curl http://169.254.169.254/2009-04-04/meta-data/local-ipv4)
            master_ip=$my_ip
            echo "$my_ip  $(hostname)" >> /etc/hosts
            
            # Check for mariadb availability before adding key and repo
            MARIADB_AVAILABLE=$(aptitude -F "%p" search mariadb-galera-server-10.0)
            if [ "" == "$MARIADB_AVAILABLE" ]; then
                apt-get install software-properties-common
                apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db
                add-apt-repository 'deb http://ftp.osuosl.org/pub/mariadb/repo/10.0/ubuntu trusty main'
                apt-get update
            fi
            
            export DEBIAN_FRONTEND=noninteractive
            
            # configure/confirm the default root password during installation
            debconf-set-selections <<< "mariadb-galera-server-10.0 mysql-server/root_password password $admin_password"
            debconf-set-selections <<< "mariadb-galera-server-10.0 mysql-server/root_password_again password $admin_password"
            apt-get -y install mariadb-galera-server-10.0 galera unzip ntp
            
            cat << EOF >> /root/.my.cnf
            [mysql]
            user=root
            password=$admin_password
            EOF
            
            # mysql_secure_installation  # this asks several questions
            ## Apparently, we can do these queries manually, instead
            mysql -uroot -p$admin_password <<-EOF
            DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
            DELETE FROM mysql.user WHERE User='';
            DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
            FLUSH PRIVILEGES;
            EOF
            
            mysql -uroot -p$admin_password <<-EOF
            GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '$admin_password' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON *.* TO 'debian-sys-maint'@'localhost' IDENTIFIED BY '$admin_password';
            EOF
            
            #service mysql stop
            
            cat << EOF >> /etc/mysql/conf.d/cluster.cnf
            [mysqld]
            query_cache_size=0
            binlog_format=ROW
            default-storage-engine=innodb
            innodb_autoinc_lock_mode=2
            query_cache_type=0
            bind-address=0.0.0.0
            
            # Galera Provider Configuration
            wsrep_provider=/usr/lib/galera/libgalera_smm.so
            
            # Galera Cluster Configuration
            wsrep_cluster_name="openbook_cluster"
            wsrep_cluster_address="gcomm://$master_ip"
            
            # Galera Synchronization Congifuration
            wsrep_sst_method=rsync
            
            # Galera Node Configuration
            wsrep_node_address="$my_ip"
            wsrep_node_name="galera1"
            EOF
            
            #sed -i "s/bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/my.cnf
            
            cat << EOF > /etc/mysql/debian.cnf
            [client]
            host     = localhost
            user     = debian-sys-maint
            password = $admin_password
            socket   = /var/run/mysqld/mysqld.sock
            [mysql_upgrade]
            host     = localhost
            user     = debian-sys-maint
            password = $admin_password
            socket   = /var/run/mysqld/mysqld.sock
            basedir  = /usr
            EOF
            
            service mysql stop
            service mysql bootstrap
            
            # Download and install Openbook
            # Check for alternate download URL first
            if [ "none" != "$alt_download_url" ]; then
                if [[ "$alt_download_url" =~ "Openbook" ]]; then
                    wget -q "$alt_download_url" -P "/tmp/"
                else
                    wget -q -r "$alt_download_url" -P "/tmp/"
                    mv /tmp/$(echo $alt_download_url | awk -F\/ '{print $3}')/Openbook*.zip /tmp/
                fi
            else
                export TOKEN=$(curl -s -X POST "https://talligent.sharefile.com/oauth/token" \
                             -H "Content-Type: application/x-www-form-urlencoded" \
                             -d "grant_type=password&client_id=eC8y8eeoeunxzOizZq2oeknIVfA9Jyjg&client_secret=PehmEqzEgKuGm2XOZWXIOUY3GyrKcfSmNtwPptPwt0tWxihs&username=$sharefile_user&password=$sharefile_pass" | python -c 'import sys, json; print json.load(sys.stdin)["access_token"]')
                export ITEM=$(curl -s -k 'https://talligent.sf-api.com/sf/v3/Items/Search?query=.zip' -H "Authorization: Bearer $TOKEN" | python -c 'import sys, json; print json.load(sys.stdin)["Results"][0]["ItemID"]')
                curl -s -k -L -o "/tmp/Openbook.zip" "https://talligent.sf-api.com/sf/v3/Items($ITEM)/Download" -H "Authorization: Bearer $TOKEN"
            fi
            unzip -q /tmp/Openbook*.zip -d /tmp
            unzip -q /tmp/Openbook-*/Openbook.war -d /tmp/Openbook
            
            mysql -uroot -p$admin_password < /tmp/Openbook/WEB-INF/classes/db/MySQL/create_openbook_schemas.sql
            
            wc_notify --data-binary '{"status": "SUCCESS"}'
  
  galera2:
    type: OS::Nova::Server
    properties:
      name: galera2
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - network: { get_param: private_net }
      security_groups: [ { get_resource: security_group } ]
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            $admin_password: { get_attr: [administrative_password, value] }
            $master_ip: { get_attr: [galera1, first_address] }
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash -ex
            my_ip=$(curl http://169.254.169.254/2009-04-04/meta-data/local-ipv4)
            echo "$my_ip  $(hostname)" >> /etc/hosts
            
            # Check for mariadb availability before adding key and repo
            MARIADB_AVAILABLE=$(aptitude -F "%p" search mariadb-galera-server-10.0)
            if [ "" == "$MARIADB_AVAILABLE" ]; then
                apt-get install software-properties-common
                apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db
                add-apt-repository 'deb http://ftp.osuosl.org/pub/mariadb/repo/10.0/ubuntu trusty main'
                apt-get update
            fi
            
            export DEBIAN_FRONTEND=noninteractive
            
            # configure/confirm the default root password during installation
            debconf-set-selections <<< "mariadb-galera-server-10.0 mysql-server/root_password password $admin_password"
            debconf-set-selections <<< "mariadb-galera-server-10.0 mysql-server/root_password_again password $admin_password"
            apt-get -y install mariadb-galera-server-10.0 galera unzip ntp
            
            cat << EOF >> /root/.my.cnf
            [mysql]
            user=root
            password=$admin_password
            EOF
            
            # mysql_secure_installation  # this asks several questions
            ## Apparently, we can do these queries manually, instead
            mysql -uroot -p$admin_password <<-EOF
            DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
            DELETE FROM mysql.user WHERE User='';
            DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
            FLUSH PRIVILEGES;
            EOF
            
            mysql -uroot -p$admin_password <<-EOF
            GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '$admin_password' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON *.* TO 'debian-sys-maint'@'localhost' IDENTIFIED BY '$admin_password';
            EOF
            
            #service mysql stop
            
            cat << EOF >> /etc/mysql/conf.d/cluster.cnf
            [mysqld]
            query_cache_size=0
            binlog_format=ROW
            default-storage-engine=innodb
            innodb_autoinc_lock_mode=2
            query_cache_type=0
            bind-address=0.0.0.0
            
            # Galera Provider Configuration
            wsrep_provider=/usr/lib/galera/libgalera_smm.so
            
            # Galera Cluster Configuration
            wsrep_cluster_name="openbook_cluster"
            wsrep_cluster_address="gcomm://$master_ip"
            
            # Galera Synchronization Congifuration
            wsrep_sst_method=rsync
            
            # Galera Node Configuration
            wsrep_node_address="$my_ip"
            wsrep_node_name="galera2"
            EOF
            
            #sed -i "s/bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/my.cnf
            
            cat << EOF > /etc/mysql/debian.cnf
            [client]
            host     = localhost
            user     = debian-sys-maint
            password = $admin_password
            socket   = /var/run/mysqld/mysqld.sock
            [mysql_upgrade]
            host     = localhost
            user     = debian-sys-maint
            password = $admin_password
            socket   = /var/run/mysqld/mysqld.sock
            basedir  = /usr
            EOF
            
            service mysql restart
            
            wc_notify --data-binary '{"status": "SUCCESS"}'
  
  galera3:
    type: OS::Nova::Server
    properties:
      name: galera3
      key_name: { get_param: key_name }
      image: { get_param: image }
      flavor: { get_param: flavor }
      networks:
        - network: { get_param: private_net }
      security_groups: [ { get_resource: security_group } ]
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            $admin_password: { get_attr: [administrative_password, value] }
            $master_ip: { get_attr: [galera1, first_address] }
            wc_notify: { get_attr: ['wait_handle', 'curl_cli'] }
          template: |
            #!/bin/bash -ex
            my_ip=$(curl http://169.254.169.254/2009-04-04/meta-data/local-ipv4)
            echo "$my_ip  $(hostname)" >> /etc/hosts
            
            # Check for mariadb availability before adding key and repo
            MARIADB_AVAILABLE=$(aptitude -F "%p" search mariadb-galera-server-10.0)
            if [ "" == "$MARIADB_AVAILABLE" ]; then
                apt-get install software-properties-common
                apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xcbcb082a1bb943db
                add-apt-repository 'deb http://ftp.osuosl.org/pub/mariadb/repo/10.0/ubuntu trusty main'
                apt-get update
            fi
            
            export DEBIAN_FRONTEND=noninteractive
            
            # configure/confirm the default root password during installation
            debconf-set-selections <<< "mariadb-galera-server-10.0 mysql-server/root_password password $admin_password"
            debconf-set-selections <<< "mariadb-galera-server-10.0 mysql-server/root_password_again password $admin_password"
            apt-get -y install mariadb-galera-server-10.0 galera unzip ntp
            
            cat << EOF >> /root/.my.cnf
            [mysql]
            user=root
            password=$admin_password
            EOF
            
            # mysql_secure_installation  # this asks several questions
            ## Apparently, we can do these queries manually, instead
            mysql -uroot -p$admin_password <<-EOF
            DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1');
            DELETE FROM mysql.user WHERE User='';
            DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%';
            FLUSH PRIVILEGES;
            EOF
            
            mysql -uroot -p$admin_password <<-EOF
            GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '$admin_password' WITH GRANT OPTION;
            GRANT ALL PRIVILEGES ON *.* TO 'debian-sys-maint'@'localhost' IDENTIFIED BY '$admin_password';
            EOF
            
            #service mysql stop
            
            cat << EOF >> /etc/mysql/conf.d/cluster.cnf
            [mysqld]
            query_cache_size=0
            binlog_format=ROW
            default-storage-engine=innodb
            innodb_autoinc_lock_mode=2
            query_cache_type=0
            bind-address=0.0.0.0
            
            # Galera Provider Configuration
            wsrep_provider=/usr/lib/galera/libgalera_smm.so
            
            # Galera Cluster Configuration
            wsrep_cluster_name="openbook_cluster"
            wsrep_cluster_address="gcomm://$master_ip"
            
            # Galera Synchronization Congifuration
            wsrep_sst_method=rsync
            
            # Galera Node Configuration
            wsrep_node_address="$my_ip"
            wsrep_node_name="galera3"
            EOF
            
            #sed -i "s/bind-address.*/bind-address = 0.0.0.0/" /etc/mysql/my.cnf
            
            cat << EOF > /etc/mysql/debian.cnf
            [client]
            host     = localhost
            user     = debian-sys-maint
            password = $admin_password
            socket   = /var/run/mysqld/mysqld.sock
            [mysql_upgrade]
            host     = localhost
            user     = debian-sys-maint
            password = $admin_password
            socket   = /var/run/mysqld/mysqld.sock
            basedir  = /usr
            EOF
            
            #################
            #################
            # MIGHT NEED TO THROW IN A mysql query check to see if the first node is full up
            service mysql restart
            
            wc_notify --data-binary '{"status": "SUCCESS"}'
  
  monitor:
    type: OS::Neutron::HealthMonitor
    properties:
      type: TCP
      delay: 5
      max_retries: 5
      timeout: 5
  galera_pool:
    type: OS::Neutron::Pool
    properties:
      name: galera-pool
      protocol: TCP
      # This is grabbing the subnet from a port created in the private_net
      subnet: { get_attr: [ port, subnets, 0, id ] }
      #subnet: { get_param: private_subnet }
      lb_method: ROUND_ROBIN
      monitors: [ { get_resource: monitor } ]
      vip: { protocol_port: 3306 }
  
  galera_lb:
    type: OS::Neutron::LoadBalancer
    properties:
      members: [ { get_resource: galera1 }, { get_resource: galera2 }, { get_resource: galera3 } ]
      pool_id: { get_resource: galera_pool }
      protocol_port: 3306
      

outputs:
  ip:
    description: The IP address of the galera pool.
    value: { get_attr: [ galera_pool, vip, address ] }
  port_data:
    description: The port data from a port on the private network
    value: { get_attr: [ port, subnets ] }
  priv_subnet:
    description: The private subnet, hopefully
    value: { get_attr: [ port, subnets, 0, id ] }
  galera_master:
    description: The Galera master node info
    value:  { get_attr: [galera1, show] }
  admin_pass:
    description: Database password
    value: { get_resource: administrative_password }
